name: Seed GitHub Project (Roadmap)
on:
  workflow_dispatch:

permissions:
  contents: read
  projects: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure gh is available
        run: gh --version

      - name: Determine owner
        id: meta
        run: |
          OWNER="${GITHUB_REPOSITORY%/*}"
          echo "owner=$OWNER" >> "$GITHUB_OUTPUT"

      - name: Create or find project
        id: project
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="Inheritance GPT Roadmap"
          OWNER="${{ steps.meta.outputs.owner }}"

          # Try to find an existing project with the same title
          EXISTING_ID=$(gh project list --owner "$OWNER" --format json --jq ".[] | select(.title==\"$TITLE\") | .id")
          if [ -n "$EXISTING_ID" ]; then
            echo "Using existing project: $EXISTING_ID"
            echo "project_id=$EXISTING_ID" >> "$GITHUB_OUTPUT"
          else
            NEW_ID=$(gh project create --owner "$OWNER" --title "$TITLE" --format json --jq .id)
            echo "Created project: $NEW_ID"
            echo "project_id=$NEW_ID" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch Status field id
        id: fields
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PID="${{ steps.project.outputs.project_id }}"
          STATUS_ID=$(gh project field-list "$PID" --format json --jq '.[] | select(.name=="Status") | .id')
          echo "status_field_id=$STATUS_ID" >> "$GITHUB_OUTPUT"

      - name: Seed draft items
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          PID="${{ steps.project.outputs.project_id }}"
          STATUS_ID="${{ steps.fields.outputs.status_field_id }}"

          add_item () {
            local TITLE="$1"
            local BODY="$2"
            local STATUS="$3"
            ITEM_ID=$(gh project item-create "$PID" --format json --jq .id --title "$TITLE" --body "$BODY")
            gh project item-set "$PID" --item-id "$ITEM_ID" --field-id "$STATUS_ID" --value "$STATUS" >/dev/null
            echo "Added: $TITLE [$STATUS]"
          }

          # Week 1 — Day 1
          add_item "Day 1 — GitHub & Project Scaffolding" "Install Node 20+, Git, editor. Scaffold Vite React TS app. Add Tailwind and deps. Replace source with app skeleton. Init Git and push to GitHub. Add README." "To do"

          # Day 2
          add_item "Day 2 — Cloudflare Pages + Cognito" "Connect repo to Cloudflare Pages. Build cmd: npm run build, output: dist. Add env vars (VITE_API_BASE, VITE_COGNITO_*). Create Cognito User Pool + App Client (public, implicit). Add callback/sign-out URLs. Enable Hosted UI domain. Test login round-trip." "To do"

          # Day 3
          add_item "Day 3 — Backend (SAM, API GW, S3, Cognito JWT)" "Request ACM for api.yourdomain.com (DNS validate in Cloudflare). Deploy SAM with DataBucketName, AllowedOrigins, Cognito IDs. Verify endpoints. Test 401 without token and 200 with Cognito id_token." "To do"

          # Day 4
          add_item "Day 4 — Wire Frontend ↔ Backend" "Set VITE_API_BASE to API domain. Redeploy Pages. Login → create case → view chart. Verify Authorization: Bearer header. Optional: add CI. Document update process in README." "To do"

          # Enhancements
          add_item "Enhancements — S3 History & Charts" "Persist per-user case history in S3. Improve charts (bar, comparison). Exports (CSV/PDF) later." "To do"

          add_item "Docs & Testing" "Write detailed setup docs (Pages, Cognito, SAM). Add test users and sample cases. Record known issues and changelog." "To do"
